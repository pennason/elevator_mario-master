<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 动态日志级别 -->
    <jmxConfigurator/>
    <springProperty name="appName" source="spring.application.name"/>

    <!--spring只打印警告日志-->
    <logger name="org.springframework" level="WARN"/>
    <!--hibernate只打印警告日志-->
    <logger name="org.hibernate" level="WARN"/>
    <!--kafka只打印警告日志-->
    <logger name="org.springframework.kafka" level="WARN"/>
    <logger name="org.apache.kafka" level="WARN"/>

    <!-- 日志输出 Encoder 类 -->
    <property name="tidEncoder" value="ch.qos.logback.core.encoder.LayoutWrappingEncoder"/>
    <!-- 日志输出 Layout 类-->
    <!--<property name="tidLayout" value="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout"/>-->
    <property name="tidLayout"
              value="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout"/>
    <!-- 日志输出格式 -->
    <!--<property name="tidPattern" value=" %d{yyyy-MM-dd HH:mm:ss.SSS} [${appName},%X{traceId},%X{spanId}] [%tid] [%thread] %-5level %logger{36} : %msg%n" />-->
    <property name="tidPattern"
              value=" %d{yyyy-MM-dd HH:mm:ss.SSS} [${appName},%X{traceId},%X{spanId}],[%X{tid}] [%thread] %-5level %logger{36} : %msg%n"/>

    <!-- 定义日志文件 输出位置 -->
    <property name="logDir" value="logs"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="7"/>

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <appender name="yidianLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志路径 -->
            <fileNamePattern>./logs/yidianApi.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <MaxFileSize>10MB</MaxFileSize>
            <totalSizeCap>20MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>utf-8</charset>
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>

    <appender name="faultTempLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志路径 -->
            <fileNamePattern>./logs/faultTempLogger.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <MaxFileSize>10MB</MaxFileSize>
            <totalSizeCap>20MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>utf-8</charset>
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>

    <appender name="workOrderLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志路径 -->
            <fileNamePattern>./logs/WorkOrderLogger.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <MaxFileSize>10MB</MaxFileSize>
            <totalSizeCap>20MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>utf-8</charset>
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>

    <appender name="heatMapLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志路径 -->
            <fileNamePattern>./logs/heatMapLog.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <MaxFileSize>10MB</MaxFileSize>
            <totalSizeCap>20MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>utf-8</charset>
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <file>${logDir}/${appName}-error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>
                ${logDir}/${appName}-error-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- WARN级别日志 appender -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <file>${logDir}/${appName}-warn.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${logDir}/${appName}-warn-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/${appName}-info.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/${appName}-info-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/${appName}-debug.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/${appName}-debug-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- TRACE级别日志 appender -->
    <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/${appName}-trace.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/${appName}-trace-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 日志输出到 skywalking 的 appender -->
    <appender name="SKYWALKING" class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender">
        <encoder class="${tidEncoder}">
            <layout class="${tidLayout}">
                <Pattern>${tidPattern}</Pattern>
            </layout>
        </encoder>
    </appender>

    <logger name="com.shmashine.api.dao" level="DEBUG"/>

    <logger name="yidianLogger" level="info" additivity="true">
        <!--指定自定义的appender来处理-->
        <appender-ref ref="yidianLog"/>
    </logger>
    <logger name="faultTempLogger" level="info" additivity="true">
        <!--指定自定义的appender来处理-->
        <appender-ref ref="faultTempLog"/>
    </logger>

    <!--急修工单删除log-->
    <logger name="WorkOrderLogger" level="info" additivity="true">
        <!--指定自定义的appender来处理-->
        <appender-ref ref="workOrderLog"/>
    </logger>

    <!--热力图统计log-->
    <logger name="heatMapLogger" level="info" additivity="true">
        <!--指定自定义的appender来处理-->
        <appender-ref ref="heatMapLog"/>
    </logger>

    <!-- root级别 DEBUG -->
    <root>
        <!-- 打印debug级别日志及以上级别日志 -->
        <level value="INFO"/>
        <!-- 控制台输出 -->
        <appender-ref ref="console"/>
        <appender-ref ref="TRACE"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="ERROR"/>
        <!-- skywalking 输出 -->
        <appender-ref ref="SKYWALKING"/>
        <!--<appender-ref ref="DEBUG" />-->
    </root>

</configuration>