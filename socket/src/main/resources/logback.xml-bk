<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
	<!--copy from base.xml -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />

	<property name="CONSOLE_LOG_PATTERN"
		value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%5p]) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t{14}]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wex" />
	<property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%5p] ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex" />

	<property name="MESSAGE_LOG_PATTERN" value="%m%n" />

	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<charset>utf-8</charset>
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
		</encoder>
	</appender>

	<!--The FILE and ASYNC appenders are here as examples for a production configuration -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志路径 -->
			<fileNamePattern>./logs/shmashineCubeMessage.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>5</maxHistory>
			<MaxFileSize>20MB</MaxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>utf-8</charset>
			<Pattern>${FILE_LOG_PATTERN}</Pattern>
		</encoder>
	</appender>
	<appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<queueSize>256</queueSize>
		<appender-ref ref="FILE" />
	</appender>

	<appender name="faultMessageLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志路径 -->
			<fileNamePattern>./logs/faultMessage.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>30</maxHistory>
			<MaxFileSize>10MB</MaxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>utf-8</charset>
			<Pattern>${MESSAGE_LOG_PATTERN}</Pattern>
		</encoder>
	</appender>
	<appender name="faultMessage_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!--不丢失日志，默认的，如果队列的80%已满则会丢弃TRACT、DEBUG、INFO级别的日志-->
		<discardingThreshold>0</discardingThreshold>
		<!--默认256-->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="faultMessageLog" />
	</appender>


	<appender name="formatMessageLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志路径 -->
			<fileNamePattern>./logs/formatMeessag.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>30</maxHistory>
			<MaxFileSize>10MB</MaxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>utf-8</charset>
			<Pattern>${MESSAGE_LOG_PATTERN}</Pattern>
		</encoder>
	</appender>
	<appender name="formatMessage_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!--不丢失日志，默认的，如果队列的80%已满则会丢弃TRACT、DEBUG、INFO级别的日志-->
		<discardingThreshold>0</discardingThreshold>
		<!--默认256-->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="formatMessageLog" />
	</appender>

	<appender name="sendMessageLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志路径 -->
			<fileNamePattern>./logs/sendMessageLog.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>30</maxHistory>
			<MaxFileSize>10MB</MaxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>utf-8</charset>
			<Pattern>${MESSAGE_LOG_PATTERN}</Pattern>
		</encoder>
	</appender>
	<appender name="sendMessageLog_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!--不丢失日志，默认的，如果队列的80%已满则会丢弃TRACT、DEBUG、INFO级别的日志-->
		<discardingThreshold>0</discardingThreshold>
		<!--默认256-->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="sendMessageLog" />
	</appender>

	<logger name="javax.activation" level="WARN" />
	<logger name="javax.mail" level="WARN" />
	<logger name="javax.xml.bind" level="WARN" />
	<logger name="jdk.event.security" level="WARN" />
	<logger name="ch.qos.logback" level="WARN" />
	<logger name="com.codahale.metrics" level="WARN" />
	<logger name="com.ryantenney" level="WARN" />
	<logger name="com.sun.xml.internal.bind" level="WARN" />
	<logger name="com.zaxxer" level="WARN" />
	<logger name="io.undertow" level="WARN" />
	<logger name="net.sf.ehcache" level="WARN" />
	<logger name="org.apache" level="WARN" />
	<logger name="org.apache.catalina.startup.DigesterFactory" level="OFF" />
	<logger name="org.bson" level="WARN" />
	<logger name="org.hibernate.validator" level="WARN" />
	<logger name="org.hibernate" level="WARN" />
	<logger name="org.hibernate.ejb.HibernatePersistence" level="OFF" />
	<logger name="org.springframework" level="WARN" />
	<logger name="org.springframework.web" level="WARN" />
	<logger name="org.springframework.security" level="WARN" />
	<logger name="org.springframework.cache" level="WARN" />
	<logger name="org.eclipse.jetty" level="WARN" />
	<logger name="httpclient.wire" level="WARN"></logger>

	<logger name="n.d.s.t.j.AbstractJerseyEurekaHttpClient" level="WARN" />
	<logger name="com.netflix.discovery.DiscoveryClient" level="WARN" />
	<logger name="io.netty" level="WARN" />
	<logger name="NamedConnectionPool" level="WARN" />

	<logger name="io.lettuce.core.protocol.CommandHandler" level="OFF" />
	<logger name="i.lettuce.core.protocol.DefaultEndpoint" level="OFF" />
	<logger name="io.lettuce.core.RedisChannelHandler" level="OFF" />
	<logger name="i.l.core.protocol.RedisStateMachine" level="OFF" />

	<logger name="faultMessageLogger" level="info" additivity="true">
		<!--指定自定义的appender来处理-->
		<appender-ref ref="faultMessageLog"/>
	</logger>

	<logger name="formatMessageLogger" level="DEBUG" additivity="true">
		<!--指定自定义的appender来处理-->
		<appender-ref ref="formatMessageLog"/>
	</logger>

	<logger name="sendMessageLogger" level="DEBUG" additivity="true">
		<!--指定自定义的appender来处理-->
		<appender-ref ref="sendMessageLog"/>
	</logger>


	<!-- jdbc LOG -->
	<logger name="jdbc.sqlonly" level="DEBUG" />
	<logger name="jdbc.sqltiming" level="OFF" />
	<logger name="jdbc.resultsettable" level="OFF" />
	<logger name="jdbc.resultset" level="OFF" />
	<logger name="jdbc.connection" level="OFF" />
	<logger name="jdbc.audit" level="OFF" />
	<logger name="druid.sql.ResultSet" level="WARN" />
	<logger name="c.a.druid.pool.PreparedStatementPool" level="WARN" />
	<logger name="c.s.a.d.T" level="WARN" />
	<logger name="c.s.api.dao" level="WARN" />
	<logger name="druid.sql.Statement" level="WARN" />
	<logger name="log4jdbc.debug" level="WARN" />
	<logger name="com.alibaba.druid.pool.DruidDataSource" level="WARN" />
	<logger name="druid.sql.Connection" level="WARN" />

	<contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
		<resetJUL>true</resetJUL>
	</contextListener>

	<root level="INFO">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="FILE" />
	</root>

</configuration>