/**
 * 示例说明
 * <p>
 * HelloOSS是OSS Java SDK的示例程序，您可以修改endpoint、accessKeyId、accessKeySecret、bucketName后直接运行。
 * 运行方法请参考README。
 * <p>
 * 本示例中的并不包括OSS Java SDK的所有功能，详细功能及使用方法，请参看“SDK手册 > Java-SDK”，
 * 链接地址是：https://help.aliyun.com/document_detail/oss/sdk/java-sdk/preface.html?spm=5176.docoss/sdk/java-sdk/。
 * <p>
 * 调用OSS Java SDK的方法时，抛出异常表示有错误发生；没有抛出异常表示成功执行。
 * 当错误发生时，OSS Java SDK的方法会抛出异常，异常中包括错误码、错误信息，详细请参看“SDK手册 > Java-SDK > 异常处理”，
 * 链接地址是：https://help.aliyun.com/document_detail/oss/sdk/java-sdk/exception.html?spm=5176.docoss/api-reference/error-response。
 * <p>
 * OSS控制台可以直观的看到您调用OSS Java SDK的结果，OSS控制台地址是：https://oss.console.aliyun.com/index#/。
 * OSS控制台使用方法请参看文档中心的“控制台用户指南”， 指南的来链接地址是：https://help.aliyun.com/document_detail/oss/getting-started/get-started.html?spm=5176.docoss/user_guide。
 * <p>
 * OSS的文档中心地址是：https://help.aliyun.com/document_detail/oss/user_guide/overview.html。
 * OSS Java SDK的文档地址是：https://help.aliyun.com/document_detail/oss/sdk/java-sdk/install.html?spm=5176.docoss/sdk/java-sdk。
 */

package com.shmashine.hikYunMou.utils;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSSClient;
import com.aliyun.oss.OSSException;
import com.aliyun.oss.model.BucketInfo;
import com.aliyun.oss.model.ObjectMetadata;


public class OSS {

    private static Logger log = LoggerFactory.getLogger(OSS.class);

    private static String endpoint = "http://oss-cn-qingdao.aliyuncs.com";

    private static String accessKeyId = "LTAIYOtTu4EmnOKn";

    private static String accessKeySecret = "1A7iXXtcy5kBXLW2uPAFRIhgIqRGRA";

    private static String bucketName = "oss-mashine";

    public static void setOSS(byte[] file, String fileName) {

//        PropertyConfigurator.configure("conf/log4j.properties");

//        logger.info("Started");

        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);

        try {
            if (ossClient.doesBucketExist(bucketName)) {
                log.info("您已经创建Bucket：" + bucketName + "。");
            } else {
                log.info("您的Bucket不存在，创建Bucket：" + bucketName + "。");
                ossClient.createBucket(bucketName);
            }

            BucketInfo info = ossClient.getBucketInfo(bucketName);
            log.info("Bucket " + bucketName + "的信息如下：");
            log.info("\t数据中心：" + info.getBucket().getLocation());
            log.info("\t创建时间：" + info.getBucket().getCreationDate());
            log.info("\t用户标志：" + info.getBucket().getOwner());

            InputStream is = new ByteArrayInputStream(file);
            ObjectMetadata objectMetadata = new ObjectMetadata();
            objectMetadata.setHeader("x-oss-storage-class", "IA");
            ossClient.putObject(bucketName, fileName, is, objectMetadata);
            log.info("Object：" + fileName + "存入OSS成功。");
        } catch (OSSException oe) {
            oe.printStackTrace();
        } catch (ClientException ce) {
            ce.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            ossClient.shutdown();
        }

        log.info("Completed");
    }


    public static void delFile(String fileName) {

        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);

        try {
            ossClient.deleteObject(bucketName, fileName);
            log.info("Object：" + fileName + "删除成功。");
        } catch (OSSException oe) {
            oe.printStackTrace();
        } catch (ClientException ce) {
            ce.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            ossClient.shutdown();
        }

        log.info("Completed");
    }
}
